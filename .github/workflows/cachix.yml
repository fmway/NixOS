# TEST
name: "cachix"
on:
  pull_request:
  push:
permissions:
  contents: read
  id-token: write
jobs:
  megasync:
    if: "${{ github.event.head_commit.message == 'chore(lockfile): update flake.lock' || github.event.head_commit.message == 'chore(deps): update flake.lock' || github.event.head_commit.message == '(lock:update) flake.lock' }}"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: DeterminateSystems/nix-installer-action@v16
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        extra-conf: "experimental-features = nix-command flakes pipe-operators"
    - uses: DeterminateSystems/magic-nix-cache-action@main
    - uses: cachix/cachix-action@v14
      with:
        name: fmcachix
        # If you chose API tokens for write access OR if you have a private cache
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix build .#megasync --verbose
    - run: nix-collect-garbage -d
  cli:
    if: "${{ github.event.head_commit.message == 'chore(lockfile): update flake.lock' || github.event.head_commit.message == 'chore(deps): update flake.lock' || github.event.head_commit.message == '(lock:update) flake.lock' }}"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: DeterminateSystems/nix-installer-action@v16
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        extra-conf: "experimental-features = nix-command flakes pipe-operators"
    - uses: DeterminateSystems/magic-nix-cache-action@main
    - uses: cachix/cachix-action@v14
      with:
        name: fmcachix
        # If you chose API tokens for write access OR if you have a private cache
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix build .#trunk .#ytui-music .#extra.encore --verbose
    - run: nix-collect-garbage -d
  wasmer:
    if: "${{ github.event.head_commit.message == 'chore(lockfile): update flake.lock' || github.event.head_commit.message == 'chore(deps): update flake.lock' || github.event.head_commit.message == '(lock:update) flake.lock' }}"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: DeterminateSystems/nix-installer-action@v16
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        extra-conf: "experimental-features = nix-command flakes pipe-operators"
    - uses: DeterminateSystems/magic-nix-cache-action@main
    - uses: cachix/cachix-action@v14
      with:
        name: fmcachix
        # If you chose API tokens for write access OR if you have a private cache
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix build .#wasmer --verbose
    - run: nix-collect-garbage -d
  cli2:
    if: "${{ github.event.head_commit.message == 'chore(lockfile): update flake.lock' || github.event.head_commit.message == 'chore(deps): update flake.lock' || github.event.head_commit.message == '(lock:update) flake.lock' }}"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: DeterminateSystems/nix-installer-action@v16
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        extra-conf: "experimental-features = nix-command flakes pipe-operators"
    - uses: DeterminateSystems/magic-nix-cache-action@main
    - uses: cachix/cachix-action@v14
      with:
        name: fmcachix
        # If you chose API tokens for write access OR if you have a private cache
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix build .#nix-init --verbose
    - run: nix-collect-garbage -d
  git:
    if: "${{ github.event.head_commit.message == 'chore(lockfile): update flake.lock' || github.event.head_commit.message == 'chore(deps): update flake.lock' || github.event.head_commit.message == '(lock:update) flake.lock' }}"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: DeterminateSystems/nix-installer-action@v16
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        extra-conf: |
          experimental-features = nix-command flakes pipe-operators repl-flake auto-allocate-uids configurable-impure-env
    - uses: DeterminateSystems/magic-nix-cache-action@main
    - uses: cachix/cachix-action@v14
      with:
        name: fmcachix
        # If you chose API tokens for write access OR if you have a private cache
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix build .#custom.git --verbose
    - run: nix-collect-garbage -d
